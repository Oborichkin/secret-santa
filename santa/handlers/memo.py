import logging

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from santa import db
from santa.handlers.states import State
import santa.button as Button

logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

logger = logging.getLogger(__name__)


memo_keyboard = [[Button.MEMO_CHANGE, Button.MEMO_SHOW], [Button.BACK]]
memo_markup = ReplyKeyboardMarkup(memo_keyboard, one_time_keyboard=False)

memo_index = f"""–í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ –º–æ–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∏–ª–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ.
–ù–∞–∂–º–∏ ¬´{Button.MEMO_CHANGE}¬ª –µ—Å–ª–∏ –µ—â–µ –Ω–µ –≤–Ω–æ—Å–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.
–ü–æ—Å–ª–µ –≤–Ω–µ—Å–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, —É–±–µ–¥–∏—Å—å, —á—Ç–æ –æ–Ω–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞, –Ω–∞–∂–∞–≤ ¬´{Button.MEMO_SHOW}¬ª.
"""

memo_prompt = """–ó–∞–ø–æ–ª–Ω–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ. –û–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞–ø–∏—à–∏:
1. ü™™ –ò–º—è –§–∞–º–∏–ª–∏—é
2. üè¨ –°–≤–æ–π –æ—Ç–¥–µ–ª
3. üìú –°–ø–∏—Å–æ–∫ –∂–µ–ª–∞–Ω–∏–π
"""


async def index(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"{update.effective_chat.id} enters memo info")
    await context.bot.send_message(chat_id=update.effective_chat.id, text=memo_index, reply_markup=memo_markup)
    return State.MEMO


async def get_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"{update.effective_chat.id} looks info")
    if info := db.get_user_info(update.effective_chat.id):
        await update.message.reply_text(info)
    else:
        await update.message.reply_text("–ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")
    return State.MEMO


async def delete_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"{update.effective_chat.id} removes information about himself")
    db.remove_user_info(update.effective_chat.id)
    await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—á–∏—â–µ–Ω–∞")
    return State.MEMO


async def prompt_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"{update.effective_chat.id} promting for info")
    await update.message.reply_text(memo_prompt, parse_mode=ParseMode.MARKDOWN)
    return State.AWAIT_MEMO


async def update_user_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db.add_user_info(update.effective_chat.id, update.message.text_markdown)
    logger.info(f"{update.effective_chat.id} entered:\n {update.message.text_markdown}\n")
    await update.message.reply_text("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    return State.MEMO
